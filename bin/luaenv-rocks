#!/bin/sh
# Install luarocks for luaenv.

if [ -z "$LUAENV_ROOT" ]; then
  LUAENV_ROOT="${HOME}/.luaenv"
fi

if [ -z "${TARBALL_CACHE_PATH}" ]; then
  export TARBALL_CACHE_PATH="${LUAENV_ROOT}/cache/tarballs"
  if [ ! -d "${TARBALL_CACHE_PATH}" ]; then
    mkdir -p ${TARBALL_CACHE_PATH}
  fi
fi

if [ -z "${LUAROCKS_SOURCE_PATH}" ]; then
  export LUAROCKS_SOURCE_PATH="${LUAENV_ROOT}/cache/sources"
  if [ ! -d "${LUAROCKS_SOURCE_PATH}" ]; then
    mkdir -p ${LUAROCKS_SOURCE_PATH}
  fi
fi

download() {
  local url="$1"
  local tofile="$2"
  [ -n "$url" ] || [ -n "$tofile" ] || return 1
  local filename=`basename "$tofile"`
  local cached_filename="$TARBALL_CACHE_PATH/$filename"

  echo "Checking cache: $cached_filename..."
  if [ ! -f "$cached_filename" ]; then
    echo "Downloading $url..."
    if type aria2c >/dev/null 2>&1; then
      aria2c -x5 -k1m --summary-interval=0 -o "$cached_filename" "$url"
    elif type curl >/dev/null 2>&1; then
      curl -qsS -o "$cached_filename" "$url"
    elif type wget >/dev/null 2>&1; then
      wget -nv -O "$cached_filename" "$url"
    else
      echo "error: please install \`aria2c\` or \`curl\` or \`wget\` and try again" >&2
      exit 1
    fi
  fi
  ln -s "$cached_filename" "$tofile" 2>&1 || return 1
}


fetch_release() {
  local version="$1"
  local package_filename="luarocks-$version.tar.gz"
  local package_url="https://keplerproject.github.io/luarocks/releases/$package_filename"
  local target_path="${LUAROCKS_SOURCE_PATH}/$package_filename"

  download "$package_url" "$target_path"

  {
    echo "Extracting $package_filename..."
    tar xzpf "$target_path" -C "${LUAROCKS_SOURCE_PATH}"
    rm -f "$target_path"
  } 2>&1
}

fetch_git() {
  local package_name="$1"
  local git_url="$2"
  local git_ref="$3"

  echo "Cloning ${git_url}..." >&2

  if type git &>/dev/null; then
    git clone --recursive --depth 1 --branch "$git_ref" "$git_url" "${package_name}" >&4 2>&1
  else
    echo "error: please install \`git\` and try again" >&2
    exit 1
  fi
}

install() {
  printf "install luarocks for $1..."
  local ROOT=`luaenv root`
  local PREFIX=$ROOT/versions/$1
  local HEADER=`find $PREFIX/include -name lua.h`
  local INC=`dirname $HEADER`
  local BIN=$PREFIX/bin

  ./configure --prefix=$PREFIX --with-lua-bin=$BIN --with-lua-include=$INC --force-config >/dev/null

  if [ $? -ne 0 ]; then
    printf "\e[31merror: configure luarocks\e[0m\n"
    exit
  fi

  make build >/dev/null
  if [ $? -ne 0 ]; then
    printf "\e[31merror: build luarocks\e[0m\n"
    exit
  fi

  make install >/dev/null
  if [ $? -ne 0 ]; then
    printf "\e[31merror: install luarocks\e[0m\n"
    exit
  else
    printf "\e[32mok\e[0m\n"
  fi
}


main() {
  case $1 in
    all)
      for version in `luaenv whence lua`; do
        install $version
      done
      ;;

    *.*)
      for version in `luaenv whence lua`; do
        if [ $version == $1 ] ; then
          install $version
          exit
        fi
      done
      printf "\e[1mError: version \e[31m$1\e[0m \e[1mnot found.\e[0m\n"
      exit
      ;;

    *)
      echo "Usage: luaenv-rocks [<version>|all]"
      echo ""
      echo "Install luarocks for your Lua installtion in luaenv."
      echo ""
      echo "<version>: install for specified version only"
      echo "           (same version strings as used in luaenv)."
      echo "      all: install luarocks for all is the lua versions"
      echo "           installed in luaenv."
      exit
      ;;
  esac
}

#main $1

fetch_release "2.4.1"
