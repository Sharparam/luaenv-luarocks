#!/bin/sh
# Install luarocks for luaenv.

usage() {
  echo "Usage: luaenv rocks [<luarocks-version>]"
  echo ""
  echo "Install specified version of LuaRocks for your Lua installtion in luaenv."
  echo ""
  echo "<luarocks-version>: install specified version of LuaRocks"
  echo "                    (default to latest known stable version)."
  exit
}

if [ -z "$LUAENV_ROOT" ]; then
  if type luaenv >/dev/null 2>&1; then
    LUAENV_ROOT=`luaenv root`
  else
    LUAENV_ROOT="${HOME}/.luaenv"
  fi
fi

if [ -z "${TARBALL_CACHE_PATH}" ]; then
  TARBALL_CACHE_PATH="${LUAENV_ROOT}/cache/tarballs"
  if [ ! -d "${TARBALL_CACHE_PATH}" ]; then
    mkdir -p ${TARBALL_CACHE_PATH}
  fi
fi

if [ -z "${LUAROCKS_SOURCE_PATH}" ]; then
  LUAROCKS_SOURCE_PATH="${LUAENV_ROOT}/cache/sources"
  if [ ! -d "${LUAROCKS_SOURCE_PATH}" ]; then
    mkdir -p ${LUAROCKS_SOURCE_PATH}
  fi
fi

required() {
  type $1 >/dev/null 2>&1 || { echo "LuaRocks needs $1 to run."; exit 1 }
}


download() {
  local url="$1"
  local tofile="$2"
  [ -n "$url" ] || [ -n "$tofile" ] || return 1
  local filename=`basename "$tofile"`
  local cached_filename="$TARBALL_CACHE_PATH/$filename"

  if [ ! -f "$cached_filename" ]; then
    echo "Downloading $url..."
    if type aria2c >/dev/null 2>&1; then
      aria2c -x5 -k1m --summary-interval=0 -o "$cached_filename" "$url"
    elif type curl >/dev/null 2>&1; then
      curl -qsS -o "$cached_filename" "$url"
    elif type wget >/dev/null 2>&1; then
      wget -nv -O "$cached_filename" "$url"
    else
      echo "error: please install \`aria2c\` or \`curl\` or \`wget\` and try again" >&2
      exit 1
    fi
    if [ "$?" -ne "0" ]; then
      echo "error: while download package"
      rm -f $cached_filename
      exit 1
    fi
  else
    echo "Cached: $cached_filename"
  fi
  ln -s "$cached_filename" "$tofile" 2>&1 || return 1
}


fetch_release() {
  local version="$1"
  local package_filename="luarocks-$version.tar.gz"
  local package_url="https://keplerproject.github.io/luarocks/releases/$package_filename"
  local target_path="${LUAROCKS_SOURCE_PATH}/$package_filename"

  download "$package_url" "$target_path"

  echo "Extracting $package_filename..."
  tar xzpf "$target_path" -C "${LUAROCKS_SOURCE_PATH}"
  rm -f "$target_path" >/dev/null 2>&1;
}

fetch_git_head() {
  local package_name="$1"
  local git_url="$2"
  local git_ref="$3"

  echo "Cloning ${git_url}..." >&2

  if type git &>/dev/null; then
    git clone --recursive --depth 1 --branch "$git_ref" "$git_url" "${package_name}" >&4 2>&1
  else
    echo "error: please install \`git\` and try again" >&2
    exit 1
  fi
}


install() {
  local LUAROCKS_VERSION=$1
  if [ -z "$LUAROCKS_VERSION" ]; then
    LUAROCKS_VERSION="2.4.1"
  fi
  local LUA_VERSION=`luaenv version-name`
  local PREFIX=$LUAENV_ROOT/versions/$LUA_VERSION
  echo "install LuaRocks $LUAROCKS_VERSION for $PREFIX..."

  fetch_release "$LUAROCKS_VERSION"

  required(unzip)

  local SOURCE=$LUAROCKS_SOURCE_PATH/luarocks-$LUAROCKS_VERSION
  local CWD=`pwd`
  echo "Entering directory: $SOURCE"
  cd $SOURCE
  local HEADER=`find $PREFIX/include -name lua.h`
  local INC=`dirname $HEADER`
  local BIN=$PREFIX/bin

  { echo "Entering directory: `pwd`"
    ./configure --prefix=$PREFIX --with-lua-bin=$BIN --with-lua-include=$INC --force-config
    make bootstrap
  }
  local STATUS="$?"
  echo "Leaving directory: `pwd`"
  cd $CWD
  echo "Now: `pwd`"
  if [ "$STATUS" -ne "0" ]; then
    echo "Error while install LuaRocks"
    exit 1
  fi
}


main() {
  case $1 in
    *.*.*)
      install "$1"
      ;;
    *)
      usage
      ;;
  esac
}

main $1
