#!/usr/bin/env lua
-- Install luarocks for luaenv.

local function p(s, ...)
  print(s:format(...))
end

local sh = {}

function sh.execf(cmd, ...)
  if select('#', ...) > 0 then
    cmd = cmd:format(...)
  end
  p(cmd)
  local rc = os.execute(cmd)
  return rc == true or rc == 0
end

function sh.capture(cmd, ...)
  if select('#', ...) > 0 then
    cmd = cmd:format(...)
  end

  local h = io.popen(cmd)
  local stdout = h:read('*a')
  h:close()
  return stdout:gsub('\n$', '')
end

function sh.mkdirp(dir)
  return sh.execf('mkdir -p "%s"', dir)
end

function sh.exists(path)
  return sh.execf('test -e "%s"', path)
end

function sh.rmrf(path)
  return sh.execf('rm -rf "%s"', path)
end

function sh.unpack_tarball(tar_gz, intodir)
  if intodir then
    return sh.execf('tar xzpf "%s" -C "%s"', tar_gz, intodir)
  else
    return sh.execf('tar zxpf "%s"', tar_gz)
  end
end

function sh.has_command(cmd)
  return sh.execf('type %s >/dev/null 2>&1', cmd)
end

function sh.required_one_of(cmd,...)
  local cmds = {cmd, ...}
  for _, v in ipairs(cmds) do
    if sh.has_command(v) then
      return true
    end
  end
  p("Required at least one of follow commands installed: %s.", table.concat(cmds, ', '))
  os.exit(1)
end

function sh.ensure(dir)
  if not sh.exists(dir) then
    sh.mkdirp(dir)
  end
end

function sh.basename(path)
  return (path:match('([^/]+)$'))
end


function sh.download(url, path)
  if sh.exists(path) then
    return true
  end
  local tmp = path..'.tmp'
  local ok = false
  if sh.has_command('aria2c') then
    ok = sh.execf('aria2c -x5 -k1m --summary-interval=0 -o "%s" "%s"', tmp, url)
  elseif sh.has_command('curl') then
    ok = sh.execf('curl -qsS -o "%s" "%s"', tmp, url)
  elseif sh.has_command('wget') then
    ok = sh.execf('wget -nv -O "%s" "%s"', tmp, url)
  else
    p('error: please install `aria2c` or `curl` or `wget` and try again')
    os.exit(1)
  end

  if ok then
    return os.rename(tmp, path)
  else
    os.remove(tmp)
    return false
  end
end

local vars = {}

local function setup_environments()
  vars.LUAENV_ROOT = sh.capture('luaenv root')
  vars.TARBALL_CACHE = vars.LUAENV_ROOT..'/cache/tarballs'
  vars.SOURCE_CACHE = vars.LUAENV_ROOT..'/cache/sources'
  sh.ensure(vars.TARBALL_CACHE)
  sh.ensure(vars.SOURCE_CACHE)
end


local function usage(code)
  print(
[[Usage: luaenv luarocks [<luarocks-version>] [--verbose]

Install specified version of LuaRocks for your Lua installtion in luaenv.

<luarocks-version>: install specified version of LuaRocks
                    (default to latest known stable version).
]])

  os.exit(code or 1)
end

local function tarball_url_for_version(version)
  return ('https://keplerproject.github.io/luarocks/releases/luarocks-%s.tar.gz'):format(version)
end

local function fetch_release(version)
  local url = tarball_url_for_version(version)
  local filename = sh.basename(url)
  local target_path = vars.TARBALL_CACHE..'/'..filename


  if not sh.download(url, target_path) then
    p('Error while downloading %s', url)
    os.exit(1)
  end

  p('Extracting %s...', filename)
  local srcdir = vars.SOURCE_CACHE..'/luarocks-'..version
  sh.rmrf(srcdir)
  sh.unpack_tarball(target_path, vars.SOURCE_CACHE)
  return srcdir
end

local function install(version)
  sh.required_one_of('unzip')
  sh.required_one_of('aria2c', 'curl', 'wget')

  version = version or "2.4.1"

  local PREFIX = vars.LUAENV_ROOT..'/versions/'..sh.capture('luaenv version-name')
  local INC = sh.capture('find $PREFIX/include -name lua.h'):gsub('/lua%.h$', '')
  local BIN = PREFIX..'/bin'

  p('Install LuaRocks %s into %s...', version, PREFIX)

  local srcdir = fetch_release(version)
  if not sh.execf('cd "%s" && ./configure --prefix="%s" --with-lua-bin="%s" --with-lua-include="%s" --force-config', srcdir, PREFIX, BIN, INC) then
    p('Error while configure LuaRocks')
    os.exit(1)
  end

  if not sh.execf('cd "%s" && make bootstrap', srcdir) then
    p('Error while install LuaRocks')
    os.exit(1)
  end

  sh.execf('luaenv rehash')
end


local function parse_arg(arg)
  local options = {
    verbose={argc=0}
  }

  local opts = {}
  for _, v in ipairs(arg) do
    local o = v:match('^%-%-(.+)')
    if o and options[o] then
      if options[o].argc == 0 then
        opts[o] = true
      end
    else
      opts.version = v
    end
  end
  return opts
end


local function main(...)
  local opts = parse_arg({...})
  if not opts.version or not opts.version:match('^%d+%.%d+.*') then
    return usage()
  end
  setup_environments()
  install(opts.version)
end

main(...)
